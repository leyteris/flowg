<?php
 if (!defined('THINK_PATH')) exit(); if(version_compare(PHP_VERSION,'6.0.0','<') ) { @set_magic_quotes_runtime (0); define('MAGIC_QUOTES_GPC',get_magic_quotes_gpc()?True:False); } define('MEMORY_LIMIT_ON',function_exists('memory_get_usage')); define('IS_CGI',substr(PHP_SAPI, 0,3)=='cgi' ? 1 : 0 ); define('IS_WIN',strstr(PHP_OS, 'WIN') ? 1 : 0 ); define('IS_CLI',PHP_SAPI=='cli'? 1 : 0); if(!IS_CLI) { if(!defined('_PHP_FILE_')) { if(IS_CGI) { $_temp = explode('.php',$_SERVER["PHP_SELF"]); define('_PHP_FILE_', rtrim(str_replace($_SERVER["HTTP_HOST"],'',$_temp[0].'.php'),'/')); }else { define('_PHP_FILE_', rtrim($_SERVER["SCRIPT_NAME"],'/')); } } if(!defined('__ROOT__')) { if( strtoupper(APP_NAME) == strtoupper(basename(dirname(_PHP_FILE_))) ) { $_root = dirname(dirname(_PHP_FILE_)); }else { $_root = dirname(_PHP_FILE_); } define('__ROOT__', (($_root=='/' || $_root=='\\')?'':$_root)); } define('URL_COMMON', 0); define('URL_PATHINFO', 1); define('URL_REWRITE', 2); define('URL_COMPAT', 3); } define('THINK_VERSION', '2.1RC1'); if(MEMORY_LIMIT_ON) { $GLOBALS['_startUseMems'] = memory_get_usage(); } define('CACHE_DIR', 'Cache'); define('HTML_DIR', 'Html'); define('CONF_DIR', 'Conf'); define('LIB_DIR', 'Lib'); define('LOG_DIR', 'Logs'); define('LANG_DIR', 'Lang'); define('TEMP_DIR', 'Temp'); define('TMPL_DIR', 'Tpl'); define('TMPL_PATH',APP_PATH.'/'.TMPL_DIR.'/'); define('HTML_PATH',APP_PATH.'/'.HTML_DIR.'/'); define('COMMON_PATH', APP_PATH.'/Common/'); define('LIB_PATH', APP_PATH.'/'.LIB_DIR.'/'); define('CACHE_PATH', RUNTIME_PATH.CACHE_DIR.'/'); define('CONFIG_PATH', APP_PATH.'/'.CONF_DIR.'/'); define('LOG_PATH', RUNTIME_PATH.LOG_DIR.'/'); define('LANG_PATH', APP_PATH.'/'.LANG_DIR.'/'); define('TEMP_PATH', RUNTIME_PATH.TEMP_DIR.'/'); define('DATA_PATH', RUNTIME_PATH.'Data/'); define('VENDOR_PATH',THINK_PATH.'/Vendor/'); set_include_path(get_include_path() . PATH_SEPARATOR . VENDOR_PATH); function N($key,$step=0){ static $_num = array(); if(!isset($_num[$key])) { $_num[$key] = 0; } if(empty($step)) return $_num[$key]; else $_num[$key] = $_num[$key]+(int)$step; } function U($url,$params=array(),$redirect=false,$suffix=true) { if(0===strpos($url,'/')) $url = substr($url,1); if(!strpos($url,'://')) $url = APP_NAME.'://'.$url; if(stripos($url,'@?')) { $url = str_replace('@?','@think?',$url); }elseif(stripos($url,'@')) { $url = $url.MODULE_NAME; } $array = parse_url($url); $app = isset($array['scheme'])? $array['scheme'] :APP_NAME; $route = isset($array['user'])?$array['user']:''; if(defined('GROUP_NAME') && strcasecmp(GROUP_NAME,C('DEFAULT_GROUP'))) $group= GROUP_NAME; if(isset($array['path'])) { $action = substr($array['path'],1); if(!isset($array['host'])) { $module = MODULE_NAME; }else{ if(strpos($array['host'],'-')) { list($group,$module) = explode('-',$array['host']); }else{ $module = $array['host']; } } }else{ $module = MODULE_NAME; $action = $array['host']; } if(isset($array['query'])) { parse_str($array['query'],$query); $params = array_merge($query,$params); } if(C('URL_MODEL')>0) { $depr = C('URL_PATHINFO_MODEL')==2?C('URL_PATHINFO_DEPR'):'/'; $str = $depr; foreach ($params as $var=>$val) $str .= $var.$depr.$val.$depr; $str = substr($str,0,-1); $group = isset($group)?$group.$depr:''; if(!empty($route)) { $url = str_replace(APP_NAME,$app,__APP__).'/'.$group.$route.$str; }else{ $url = str_replace(APP_NAME,$app,__APP__).'/'.$group.$module.$depr.$action.$str; } if($suffix && C('URL_HTML_SUFFIX')) $url .= C('URL_HTML_SUFFIX'); }else{ $params = http_build_query($params); $params = !empty($params) ? '&'.$params : ''; if(isset($group)) { $url = str_replace(APP_NAME,$app,__APP__).'?'.C('VAR_GROUP').'='.$group.'&'.C('VAR_MODULE').'='.$module.'&'.C('VAR_ACTION').'='.$action.$params; }else{ $url = str_replace(APP_NAME,$app,__APP__).'?'.C('VAR_MODULE').'='.$module.'&'.C('VAR_ACTION').'='.$action.$params; } } if($redirect) redirect($url); else return $url; } function parse_name($name,$type=0) { if($type) { return ucfirst(preg_replace("/_([a-zA-Z])/e", "strtoupper('\\1')", $name)); }else{ $name = preg_replace("/[A-Z]/", "_\\0", $name); return strtolower(trim($name, "_")); } } function halt($error) { if(IS_CLI) exit ($error); $e = array(); if(C('APP_DEBUG')){ if(!is_array($error)) { $trace = debug_backtrace(); $e['message'] = $error; $e['file'] = $trace[0]['file']; $e['class'] = $trace[0]['class']; $e['function'] = $trace[0]['function']; $e['line'] = $trace[0]['line']; $traceInfo=''; $time = date("y-m-d H:i:m"); foreach($trace as $t) { $traceInfo .= '['.$time.'] '.$t['file'].' ('.$t['line'].') '; $traceInfo .= $t['class'].$t['type'].$t['function'].'('; $traceInfo .= implode(', ', $t['args']); $traceInfo .=")<br/>"; } $e['trace'] = $traceInfo; }else { $e = $error; } include C('TMPL_EXCEPTION_FILE'); } else { $error_page = C('ERROR_PAGE'); if(!empty($error_page)){ redirect($error_page); }else { if(C('SHOW_ERROR_MSG')) $e['message'] = is_array($error)?$error['message']:$error; else $e['message'] = C('ERROR_MESSAGE'); include C('TMPL_EXCEPTION_FILE'); } } exit; } function redirect($url,$time=0,$msg='') { $url = str_replace(array("\n", "\r"), '', $url); if(empty($msg)) $msg = "系统将在{$time}秒之后自动跳转到{$url}！"; if (!headers_sent()) { if(0===$time) { header("Location: ".$url); }else { header("refresh:{$time};url={$url}"); echo($msg); } exit(); }else { $str = "<meta http-equiv='Refresh' content='{$time};URL={$url}'>"; if($time!=0) $str .= $msg; exit($str); } } function throw_exception($msg,$type='ThinkException',$code=0) { if(IS_CLI) exit($msg); if(class_exists($type,false)) throw new $type($msg,$code,true); else halt($msg); } function debug_start($label='') { $GLOBALS[$label]['_beginTime'] = microtime(TRUE); if ( MEMORY_LIMIT_ON ) $GLOBALS[$label]['_beginMem'] = memory_get_usage(); } function debug_end($label='') { $GLOBALS[$label]['_endTime'] = microtime(TRUE); echo '<div style="text-align:center;width:100%">Process '.$label.': Times '.number_format($GLOBALS[$label]['_endTime']-$GLOBALS[$label]['_beginTime'],6).'s '; if ( MEMORY_LIMIT_ON ) { $GLOBALS[$label]['_endMem'] = memory_get_usage(); echo ' Memories '.number_format(($GLOBALS[$label]['_endMem']-$GLOBALS[$label]['_beginMem'])/1024).' k'; } echo '</div>'; } function dump($var, $echo=true,$label=null, $strict=true) { $label = ($label===null) ? '' : rtrim($label) . ' '; if(!$strict) { if (ini_get('html_errors')) { $output = print_r($var, true); $output = "<pre>".$label.htmlspecialchars($output,ENT_QUOTES)."</pre>"; } else { $output = $label . print_r($var, true); } }else { ob_start(); var_dump($var); $output = ob_get_clean(); if(!extension_loaded('xdebug')) { $output = preg_replace("/\]\=\>\n(\s+)/m", "] => ", $output); $output = '<pre>'. $label. htmlspecialchars($output, ENT_QUOTES). '</pre>'; } } if ($echo) { echo($output); return null; }else return $output; } function get_instance_of($name,$method='',$args=array()) { static $_instance = array(); $identify = empty($args)?$name.$method:$name.$method.to_guid_string($args); if (!isset($_instance[$identify])) { if(class_exists($name)){ $o = new $name(); if(method_exists($o,$method)){ if(!empty($args)) { $_instance[$identify] = call_user_func_array(array(&$o, $method), $args); }else { $_instance[$identify] = $o->$method(); } } else $_instance[$identify] = $o; } else halt(L('_CLASS_NOT_EXIST_').':'.$name); } return $_instance[$identify]; } function __autoload($name) { if(alias_import($name)) return ; if(substr($name,-5)=="Model") { require_cache(LIB_PATH.'Model/'.$name.'.class.php'); }elseif(substr($name,-6)=="Action"){ require_cache(LIB_PATH.'Action/'.$name.'.class.php'); }else { if(C('APP_AUTOLOAD_PATH')) { $paths = explode(',',C('APP_AUTOLOAD_PATH')); foreach ($paths as $path){ if(import($path.$name)) { return ; } } } } return ; } function require_cache($filename) { static $_importFiles = array(); $filename = realpath($filename); if (!isset($_importFiles[$filename])) { if(file_exists_case($filename)){ require $filename; $_importFiles[$filename] = true; } else { $_importFiles[$filename] = false; } } return $_importFiles[$filename]; } function file_exists_case($filename) { if(is_file($filename)) { if(IS_WIN && C('APP_FILE_CASE')) { if(basename(realpath($filename)) != basename($filename)) return false; } return true; } return false; } function import($class,$baseUrl = '',$ext='.class.php') { static $_file = array(); static $_class = array(); $class = str_replace(array('.','#'), array('/','.'), $class); if('' === $baseUrl && false === strpos($class,'/')) { return alias_import($class); } if(isset($_file[$class.$baseUrl])) return true; else $_file[$class.$baseUrl] = true; $class_strut = explode("/",$class); if(empty($baseUrl)) { if('@'==$class_strut[0] || APP_NAME == $class_strut[0] ) { $baseUrl = dirname(LIB_PATH); $class = str_replace(array(APP_NAME.'/','@/'),LIB_DIR.'/',$class); }elseif(in_array(strtolower($class_strut[0]),array('think','org','com'))) { $baseUrl = THINK_PATH.'/Lib/'; }else { $class = substr_replace($class, '', 0,strlen($class_strut[0])+1); $baseUrl = APP_PATH.'/../'.$class_strut[0].'/'.LIB_DIR.'/'; } } if(substr($baseUrl, -1) != "/") $baseUrl .= "/"; $classfile = $baseUrl . $class . $ext; if($ext == '.class.php' && is_file($classfile)) { $class = basename($classfile,$ext); if(isset($_class[$class])) throw_exception(L('_CLASS_CONFLICT_').':'.$_class[$class].' '.$classfile); $_class[$class] = $classfile; } return require_cache($classfile); } function load($name,$baseUrl='',$ext='.php') { $name = str_replace(array('.','#'), array('/','.'), $name); if(empty($baseUrl)) { if(0 === strpos($name,'@/')) { $baseUrl = APP_PATH.'/Common/'; $name = substr($name,2); }else{ $baseUrl = THINK_PATH.'/Common/'; } } if(substr($baseUrl, -1) != "/") $baseUrl .= "/"; include $baseUrl . $name . $ext; } function vendor($class,$baseUrl = '',$ext='.php') { if(empty($baseUrl)) $baseUrl = VENDOR_PATH; return import($class,$baseUrl,$ext); } function alias_import($alias,$classfile='') { static $_alias = array(); if('' !== $classfile) { $_alias[$alias] = $classfile; return ; } if(is_string($alias)) { if(isset($_alias[$alias])) return require_cache($_alias[$alias]); }elseif(is_array($alias)){ foreach ($alias as $key=>$val) $_alias[$key] = $val; return ; } return false; } function D($name='',$app='') { static $_model = array(); if(empty($name)) return new Model; if(empty($app)) $app = C('DEFAULT_APP'); if(isset($_model[$app.$name])) return $_model[$app.$name]; $OriClassName = $name; if(strpos($name,'.')) { $array = explode('.',$name); $name = array_pop($array); $className = $name.'Model'; import($app.'.Model.'.implode('.',$array).'.'.$className); }else{ $className = $name.'Model'; import($app.'.Model.'.$className); } if(class_exists($className)) { $model = new $className(); }else { $model = new Model($name); } $_model[$app.$OriClassName] = $model; return $model; } function M($name='',$class='Model') { static $_model = array(); if(!isset($_model[$name.'_'.$class])) $_model[$name.'_'.$class] = new $class($name); return $_model[$name.'_'.$class]; } function A($name,$app='@') { static $_action = array(); if(isset($_action[$app.$name])) return $_action[$app.$name]; $OriClassName = $name; if(strpos($name,'.')) { $array = explode('.',$name); $name = array_pop($array); $className = $name.'Action'; import($app.'.Action.'.implode('.',$array).'.'.$className); }else{ $className = $name.'Action'; import($app.'.Action.'.$className); } if(class_exists($className)) { $action = new $className(); $_action[$app.$OriClassName] = $action; return $action; }else { return false; } } function R($module,$action,$app='@') { $class = A($module,$app); if($class) return call_user_func(array(&$class,$action)); else return false; } function L($name=null,$value=null) { static $_lang = array(); if(empty($name)) return $_lang; if (is_string($name) ) { $name = strtoupper($name); if (is_null($value)) return isset($_lang[$name]) ? $_lang[$name] : $name; $_lang[$name] = $value; return; } if (is_array($name)) $_lang = array_merge($_lang,array_change_key_case($name,CASE_UPPER)); return; } function C($name=null,$value=null) { static $_config = array(); if(empty($name)) return $_config; if (is_string($name)) { if (!strpos($name,'.')) { $name = strtolower($name); if (is_null($value)) return isset($_config[$name])? $_config[$name] : null; $_config[$name] = $value; return; } $name = explode('.',$name); $name[0] = strtolower($name[0]); if (is_null($value)) return isset($_config[$name[0]][$name[1]]) ? $_config[$name[0]][$name[1]] : null; $_config[$name[0]][$name[1]] = $value; return; } if(is_array($name)) return $_config = array_merge($_config,array_change_key_case($name)); return null; } function tag($name,$params=array()) { $tags = C('TAGS_FILTER_LIST.'.$name); if(!empty($tags)) { foreach ($tags as $key=>$call){ $result = B($call,$params); } } } function filter($name,&$content) { $class = $name.'Filter'; require_cache(LIB_PATH.'Filter/'.$class.'.class.php'); $filter = new $class(); $content = $filter->run($content); } function B($name,$params=array()) { $class = $name.'Behavior'; require_cache(LIB_PATH.'Behavior/'.$class.'.class.php'); $behavior = new $class(); return $behavior->run($params); } function W($name,$data=array(),$return=false) { $class = $name.'Widget'; require_cache(LIB_PATH.'Widget/'.$class.'.class.php'); if(!class_exists($class)) throw_exception(L('_CLASS_NOT_EXIST_').':'.$class); $widget = Think::instance($class); $content = $widget->render($data); if($return) return $content; else echo $content; } function S($name,$value='',$expire='',$type='') { static $_cache = array(); alias_import('Cache'); $cache = Cache::getInstance($type); if('' !== $value) { if(is_null($value)) { $result = $cache->rm($name); if($result) unset($_cache[$type.'_'.$name]); return $result; }else{ $cache->set($name,$value,$expire); $_cache[$type.'_'.$name] = $value; } return ; } if(isset($_cache[$type.'_'.$name])) return $_cache[$type.'_'.$name]; $value = $cache->get($name); $_cache[$type.'_'.$name] = $value; return $value; } function F($name,$value='',$path=DATA_PATH) { static $_cache = array(); $filename = $path.$name.'.php'; if('' !== $value) { if(is_null($value)) { return unlink($filename); }else{ $dir = dirname($filename); if(!is_dir($dir)) mkdir($dir); return file_put_contents($filename,"<?php\nreturn ".var_export($value,true).";\n?>"); } } if(isset($_cache[$name])) return $_cache[$name]; if(is_file($filename)) { $value = include $filename; $_cache[$name] = $value; }else{ $value = false; } return $value; } function to_guid_string($mix) { if(is_object($mix) && function_exists('spl_object_hash')) { return spl_object_hash($mix); }elseif(is_resource($mix)){ $mix = get_resource_type($mix).strval($mix); }else{ $mix = serialize($mix); } return md5($mix); } function strip_whitespace($content) { $stripStr = ''; $tokens = token_get_all ($content); $last_space = false; for ($i = 0, $j = count ($tokens); $i < $j; $i++) { if (is_string ($tokens[$i])) { $last_space = false; $stripStr .= $tokens[$i]; } else { switch ($tokens[$i][0]) { case T_COMMENT: case T_DOC_COMMENT: break; case T_WHITESPACE: if (!$last_space) { $stripStr .= ' '; $last_space = true; } break; default: $last_space = false; $stripStr .= $tokens[$i][1]; } } } return $stripStr; } function compile($filename,$runtime=false) { $content = file_get_contents($filename); if(true === $runtime) $content = preg_replace('/\/\/\[RUNTIME\](.*?)\/\/\[\/RUNTIME\]/s','',$content); $content = substr(trim($content),5); if('?>' == substr($content,-2)) $content = substr($content,0,-2); return $content; } function array_define($array) { $content = ''; foreach($array as $key=>$val) { $key = strtoupper($key); if(in_array($key,array('THINK_PATH','APP_NAME','APP_PATH','APP_CACHE_NAME','RUNTIME_PATH','RUNTIME_ALLINONE','THINK_MODE'))) $content .= 'if(!defined(\''.$key.'\')) '; if(is_int($val) || is_float($val)) { $content .= "define('".$key."',".$val.");"; }elseif(is_bool($val)) { $val = ($val)?'true':'false'; $content .= "define('".$key."',".$val.");"; }elseif(is_string($val)) { $content .= "define('".$key."','".addslashes($val)."');"; } } return $content; } function mk_dir($dir, $mode = 0777) { if (is_dir($dir) || @mkdir($dir,$mode)) return true; if (!mk_dir(dirname($dir),$mode)) return false; return @mkdir($dir,$mode); } function auto_charset($fContents,$from='gbk',$to='utf-8'){ $from = strtoupper($from)=='UTF8'? 'utf-8':$from; $to = strtoupper($to)=='UTF8'? 'utf-8':$to; if( strtoupper($from) === strtoupper($to) || empty($fContents) || (is_scalar($fContents) && !is_string($fContents)) ){ return $fContents; } if(is_string($fContents) ) { if(function_exists('mb_convert_encoding')){ return mb_convert_encoding ($fContents, $to, $from); }elseif(function_exists('iconv')){ return iconv($from,$to,$fContents); }else{ return $fContents; } } elseif(is_array($fContents)){ foreach ( $fContents as $key => $val ) { $_key = auto_charset($key,$from,$to); $fContents[$_key] = auto_charset($val,$from,$to); if($key != $_key ) unset($fContents[$key]); } return $fContents; } else{ return $fContents; } } function xml_encode($data,$encoding='utf-8',$root="think") { $xml = '<?xml version="1.0" encoding="'.$encoding.'"?>'; $xml.= '<'.$root.'>'; $xml.= data_to_xml($data); $xml.= '</'.$root.'>'; return $xml; } function data_to_xml($data) { if(is_object($data)) { $data = get_object_vars($data); } $xml = ''; foreach($data as $key=>$val) { is_numeric($key) && $key="item id=\"$key\""; $xml.="<$key>"; $xml.=(is_array($val)||is_object($val))?data_to_xml($val):$val; list($key,)=explode(' ',$key); $xml.="</$key>"; } return $xml; } function cookie($name,$value='',$option=null) { $config = array( 'prefix' => C('COOKIE_PREFIX'), 'expire' => C('COOKIE_EXPIRE'), 'path' => C('COOKIE_PATH'), 'domain' => C('COOKIE_DOMAIN'), ); if (!empty($option)) { if (is_numeric($option)) $option = array('expire'=>$option); elseif( is_string($option) ) parse_str($option,$option); $config = array_merge($config,array_change_key_case($option)); } if (is_null($name)) { if (empty($_COOKIE)) return; $prefix = empty($value)? $config['prefix'] : $value; if (!empty($prefix)) { foreach($_COOKIE as $key=>$val) { if (0 === stripos($key,$prefix)){ setcookie($key,'',time()-3600,$config['path'],$config['domain']); unset($_COOKIE[$key]); } } } return; } $name = $config['prefix'].$name; if (''===$value){ return isset($_COOKIE[$name]) ? $_COOKIE[$name] : null; }else { if (is_null($value)) { setcookie($name,'',time()-3600,$config['path'],$config['domain']); unset($_COOKIE[$name]); }else { $expire = !empty($config['expire'])? time()+ intval($config['expire']):0; setcookie($name,$value,$expire,$config['path'],$config['domain']); $_COOKIE[$name] = $value; } } } class Think { private static $_instance = array(); public function __set($name ,$value) { if(property_exists($this,$name)) $this->$name = $value; } public function __get($name) { return isset($this->$name)?$this->$name:null; } public static function autoload($classname) { if(alias_import($classname)) return ; if(substr($classname,-5)=="Model") { require_cache(LIB_PATH.'Model/'.$classname.'.class.php'); }elseif(substr($classname,-6)=="Action"){ require_cache(LIB_PATH.'Action/'.$classname.'.class.php'); }else { if(C('APP_AUTOLOAD_PATH')) { $paths = explode(',',C('APP_AUTOLOAD_PATH')); foreach ($paths as $path){ if(import($path.$classname)) return ; } } } return ; } static public function instance($class,$method='') { $identify = $class.$method; if(!isset(self::$_instance[$identify])) { if(class_exists($class)){ $o = new $class(); if(!empty($method) && method_exists($o,$method)) self::$_instance[$identify] = call_user_func_array(array(&$o, $method)); else self::$_instance[$identify] = $o; } else halt(L('_CLASS_NOT_EXIST_')); } return self::$_instance[$identify]; } } class ThinkException extends Exception { private $type; private $extra; public function __construct($message,$code=0,$extra=false) { parent::__construct($message,$code); $this->type = get_class($this); $this->extra = $extra; } public function __toString() { $trace = $this->getTrace(); if($this->extra) array_shift($trace); $this->class = $trace[0]['class']; $this->function = $trace[0]['function']; $this->file = $trace[0]['file']; $this->line = $trace[0]['line']; $file = file($this->file); $traceInfo=''; $time = date("y-m-d H:i:m"); foreach($trace as $t) { $traceInfo .= '['.$time.'] '.$t['file'].' ('.$t['line'].') '; $traceInfo .= $t['class'].$t['type'].$t['function'].'('; $traceInfo .= implode(', ', $t['args']); $traceInfo .=")\n"; } $error['message'] = $this->message; $error['type'] = $this->type; $error['detail'] = L('_MODULE_').'['.MODULE_NAME.'] '.L('_ACTION_').'['.ACTION_NAME.']'."\n"; $error['detail'] .= ($this->line-2).': '.$file[$this->line-3]; $error['detail'] .= ($this->line-1).': '.$file[$this->line-2]; $error['detail'] .= '<font color="#FF6600" >'.($this->line).': <strong>'.$file[$this->line-1].'</strong></font>'; $error['detail'] .= ($this->line+1).': '.$file[$this->line]; $error['detail'] .= ($this->line+2).': '.$file[$this->line+1]; $error['class'] = $this->class; $error['function'] = $this->function; $error['file'] = $this->file; $error['line'] = $this->line; $error['trace'] = $traceInfo; if(C('LOG_EXCEPTION_RECORD')) { Log::Write('('.$this->type.') '.$this->message); } return $error ; } } class Log extends Think { const EMERG = 'EMERG'; const ALERT = 'ALERT'; const CRIT = 'CRIT'; const ERR = 'ERR'; const WARN = 'WARN'; const NOTICE = 'NOTIC'; const INFO = 'INFO'; const DEBUG = 'DEBUG'; const SQL = 'SQL'; const SYSTEM = 0; const MAIL = 1; const TCP = 2; const FILE = 3; static $log = array(); static $format = '[ c ]'; static function record($message,$level=self::ERR,$record=false) { if($record || in_array($level,C('LOG_RECORD_LEVEL'))) { $now = date(self::$format); self::$log[] = "{$now} {$level}: {$message}\r\n"; } } static function save($type=self::FILE,$destination='',$extra='') { if(empty($destination)) $destination = LOG_PATH.date('y_m_d').".log"; if(self::FILE == $type) { if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'/'.time().'-'.basename($destination)); } error_log(implode("",self::$log), $type,$destination ,$extra); self::$log = array(); } static function write($message,$level=self::ERR,$type=self::FILE,$destination='',$extra='') { $now = date(self::$format); if(empty($destination)) $destination = LOG_PATH.date('y_m_d').".log"; if(self::FILE == $type) { if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'/'.time().'-'.basename($destination)); } error_log("{$now} {$level}: {$message}\r\n", $type,$destination,$extra ); } } class App { static public function run() { set_error_handler(array('App',"appError")); set_exception_handler(array('App',"appException")); if(defined('RUNTIME_MODEL')){ }elseif(is_file(RUNTIME_PATH.'~app.php') && (!is_file(CONFIG_PATH.'config.php') || filemtime(RUNTIME_PATH.'~app.php')>filemtime(CONFIG_PATH.'config.php'))) { C(include RUNTIME_PATH.'~app.php'); }else{ App::build(); } Vendor('phpRPC.phprpc_server'); $server = new PHPRPC_Server(); $actions = explode(',',C('APP_PHPPRC_ACTIONS')); foreach ($actions as $action){ $temp = $action.'Action'; $methods = get_class_methods($temp); $server->add($methods,new $temp); } $server->start(); echo $server->comment(); if(C('LOG_RECORD')) Log::save(); return ; } static private function build() { C(include THINK_PATH.'/Common/convention.php'); if(is_file(CONFIG_PATH.'config.php')) { C(include CONFIG_PATH.'config.php'); } $common = ''; $debug = C('APP_DEBUG'); if(is_file(COMMON_PATH.'common.php')) { include COMMON_PATH.'common.php'; if(!$debug) { $common .= compile(COMMON_PATH.'common.php'); } } if(is_file(CONFIG_PATH.'app.php')) { $list = include CONFIG_PATH.'app.php'; foreach ($list as $key=>$file){ require $file; if(!$debug) { $common .= compile($file); } } } if($debug) { C(include THINK_PATH.'/Common/debug.php'); if(is_file(CONFIG_PATH.'debug.php')) { C(include CONFIG_PATH.'debug.php'); } }else{ if(defined('RUNTIME_ALLINONE')) { $defs = get_defined_constants(TRUE); $content = array_define($defs['user']); $content .= substr(file_get_contents(RUNTIME_PATH.'~runtime.php'),5); $content .= $common."\nreturn ".var_export(C(),true).';'; file_put_contents(RUNTIME_PATH.'~allinone.php',strip_whitespace('<?php '.$content)); }else{ $content = "<?php ".$common."\nreturn ".var_export(C(),true).";\n?>"; file_put_contents(RUNTIME_PATH.'~app.php',strip_whitespace($content)); } } return ; } static public function appException($e) { halt($e->__toString()); } static public function appError($errno, $errstr, $errfile, $errline) { switch ($errno) { case E_ERROR: case E_USER_ERROR: $errorStr = "[$errno] $errstr ".basename($errfile)." 第 $errline 行."; if(C('LOG_RECORD')){ Log::write($errorStr,Log::ERR); } halt($errorStr); break; case E_STRICT: case E_USER_WARNING: case E_USER_NOTICE: default: $errorStr = "[$errno] $errstr ".basename($errfile)." 第 $errline 行."; Log::record($errorStr,Log::NOTICE); break; } } }; abstract class Action extends Think { public function __call($method,$parms) { if(method_exists($this,'_empty')) { $this->_empty($method,$parms); } } } define('HAS_ONE',1); define('BELONGS_TO',2); define('HAS_MANY',3); define('MANY_TO_MANY',4); class Model extends Think { const MODEL_INSERT = 1; const MODEL_UPDATE = 2; const MODEL_BOTH = 3; const MUST_VALIDATE = 1; const EXISTS_VAILIDATE = 0; const VALUE_VAILIDATE = 2; private $_extModel = null; protected $db = null; protected $pk = 'id'; protected $tablePrefix = ''; protected $tableSuffix = ''; protected $name = ''; protected $dbName = ''; protected $tableName = ''; protected $trueTableName =''; protected $error = ''; protected $fields = array(); protected $data = array(); protected $options = array(); protected $_validate = array(); protected $_auto = array(); protected $_map = array(); protected $autoCheckFields = true; public function __construct($name='',$connection='') { $this->_initialize(); if(!empty($name)) { $this->name = $name; }elseif(empty($this->name)){ $this->name = $this->getModelName(); } $this->db = Db::getInstance(empty($this->connection)?$connection:$this->connection); $this->tablePrefix = $this->tablePrefix?$this->tablePrefix:C('DB_PREFIX'); $this->tableSuffix = $this->tableSuffix?$this->tableSuffix:C('DB_SUFFIX'); if(!empty($this->name) && $this->autoCheckFields) $this->_checkTableInfo(); } protected function _checkTableInfo() { if(empty($this->fields)) { if(C('DB_FIELDS_CACHE')) { $this->fields = F('_fields/'.$this->name); if(!$this->fields) $this->flush(); }else{ $this->flush(); } } } public function flush() { $fields = $this->db->getFields($this->getTableName()); $this->fields = array_keys($fields); $this->fields['_autoinc'] = false; foreach ($fields as $key=>$val){ $type[$key] = $val['type']; if($val['primary']) { $this->fields['_pk'] = $key; if($val['autoinc']) $this->fields['_autoinc'] = true; } } if(C('DB_FIELDTYPE_CHECK')) $this->fields['_type'] = $type; if(C('DB_FIELDS_CACHE')) F('_fields/'.$this->name,$this->fields); } public function switchModel($type,$vars=array()) { $class = ucwords(strtolower($type)).'Model'; if(!class_exists($class)) throw_exception($class.L('_MODEL_NOT_EXIST_')); $this->_extModel = new $class($this->name); if(!empty($vars)) { foreach ($vars as $var) $this->_extModel->setProperty($var,$this->$var); } return $this->_extModel; } public function __set($name,$value) { $this->data[$name] = $value; } public function __get($name) { return isset($this->data[$name])?$this->data[$name]:null; } public function __isset($name) { return isset($this->data[$name]); } public function __unset($name) { unset($this->data[$name]); } public function __call($method,$args) { if(in_array(strtolower($method),array('field','table','where','order','limit','page','alias','having','group','lock','distinct'),true)) { $this->options[strtolower($method)] = $args[0]; return $this; }elseif(in_array(strtolower($method),array('count','sum','min','max','avg'),true)){ $field = isset($args[0])?$args[0]:'*'; return $this->getField(strtoupper($method).'('.$field.') AS tp_'.$method); }elseif(strtolower(substr($method,0,5))=='getby') { $field = parse_name(substr($method,5)); $options['where'] = $field.'=\''.$args[0].'\''; return $this->find($options); }else{ throw_exception(__CLASS__.':'.$method.L('_METHOD_NOT_EXIST_')); return; } } protected function _initialize() {} protected function _facade($data) { if(!empty($this->fields)) { foreach ($data as $key=>$val){ if(!in_array($key,$this->fields,true)){ unset($data[$key]); }elseif(C('DB_FIELDTYPE_CHECK') && is_scalar($val)) { $fieldType = strtolower($this->fields['_type'][$key]); if(false !== strpos($fieldType,'int')) { $data[$key] = intval($val); }elseif(false !== strpos($fieldType,'float') || false !== strpos($fieldType,'double')){ $data[$key] = floatval($val); } } } } $this->_before_write($data); return $data; } protected function _before_write(&$data) {} public function add($data='',$options=array(),$replace=false) { if(empty($data)) { if(!empty($this->data)) { $data = $this->data; }else{ $this->error = L('_DATA_TYPE_INVALID_'); return false; } } $options = $this->_parseOptions($options); $data = $this->_facade($data); if(false === $this->_before_insert($data,$options)) { return false; } $result = $this->db->insert($data,$options,$replace); if(false !== $result ) { $insertId = $this->getLastInsID(); if($insertId) { $data[$this->getPk()] = $insertId; $this->_after_insert($data,$options); return $insertId; } } return $result; } protected function _before_insert(&$data,$options) {} protected function _after_insert($data,$options) {} public function addAll($dataList,$options=array(),$replace=false){ if(empty($dataList)) { $this->error = L('_DATA_TYPE_INVALID_'); return false; } $options = $this->_parseOptions($options); foreach ($dataList as $key=>$data){ $dataList[$key] = $this->_facade($data); } $result = $this->db->insertAll($dataList,$options,$replace); if(false !== $result ) { $insertId = $this->getLastInsID(); if($insertId) { return $insertId; } } return $result; } public function selectAdd($fields='',$table='',$options=array()) { $options = $this->_parseOptions($options); if(false === $result = $this->db->selectInsert($fields?$fields:$options['field'],$table?$table:$this->getTableName(),$options)){ $this->error = L('_OPERATION_WRONG_'); return false; }else { return $result; } } public function save($data='',$options=array()) { if(empty($data)) { if(!empty($this->data)) { $data = $this->data; }else{ $this->error = L('_DATA_TYPE_INVALID_'); return false; } } $data = $this->_facade($data); $options = $this->_parseOptions($options); if(false === $this->_before_update($data,$options)) { return false; } if(!isset($options['where']) ) { if(isset($data[$this->getPk()])) { $pk = $this->getPk(); $options['where'] = $pk.'=\''.$data[$pk].'\''; $pkValue = $data[$pk]; unset($data[$pk]); }else{ $this->error = L('_OPERATION_WRONG_'); return false; } } $result = $this->db->update($data,$options); if(false !== $result) { if(isset($pkValue)) $data[$pk] = $pkValue; $this->_after_update($data,$options); } return $result; } protected function _before_update(&$data,$options) {} protected function _after_update($data,$options) {} public function delete($options=array()) { if(empty($options) && empty($this->options)) { if(!empty($this->data) && isset($this->data[$this->getPk()])) return $this->delete($this->data[$this->getPk()]); else return false; } if(is_numeric($options) || is_string($options)) { $pk = $this->getPk(); if(strpos($options,',')) { $where = $pk.' IN ('.$options.')'; }else{ $where = $pk.'=\''.$options.'\''; $pkValue = $options; } $options = array(); $options['where'] = $where; } $options = $this->_parseOptions($options); $result= $this->db->delete($options); if(false !== $result) { $data = array(); if(isset($pkValue)) $data[$pk] = $pkValue; $this->_after_delete($data,$options); } return $result; } protected function _after_delete($data,$options) {} public function select($options=array()) { if(is_string($options) || is_numeric($options)) { $where = $this->getPk().' IN ('.$options.')'; $options = array(); $options['where'] = $where; } $options = $this->_parseOptions($options); $resultSet = $this->db->select($options); if(false === $resultSet) { return false; } if(empty($resultSet)) { return null; } $this->_after_select($resultSet,$options); return $resultSet; } protected function _after_select(&$resultSet,$options) {} public function findAll($options=array()) { return $this->select($options); } private function _parseOptions($options) { if(is_array($options)) $options = array_merge($this->options,$options); $this->options = array(); if(!isset($options['table'])) $options['table'] =$this->getTableName(); if(!empty($options['alias'])) { $options['table'] .= ' '.$options['alias']; } if(C('DB_FIELDTYPE_CHECK')) { if(isset($options['where']) && is_array($options['where'])) { foreach ($options['where'] as $key=>$val){ if(in_array($key,$this->fields,true) && is_scalar($val)){ $fieldType = strtolower($this->fields['_type'][$key]); if(false !== strpos($fieldType,'int')) { $options['where'][$key] = intval($val); }elseif(false !== strpos($fieldType,'float') || false !== strpos($fieldType,'double')){ $options['where'][$key] = floatval($val); } } } } } $this->_options_filter($options); return $options; } protected function _options_filter(&$options) {} public function find($options=array()) { if(!empty($options) && ( is_numeric($options) || is_string($options))) { $where = $this->getPk().'=\''.$options.'\''; $options = array(); $options['where'] = $where; } $options['limit'] = 1; $options = $this->_parseOptions($options); $resultSet = $this->db->select($options); if(false === $resultSet) { return false; } if(empty($resultSet)) { return null; } $this->data = $resultSet[0]; $this->_after_find($this->data,$options); return $this->data; } protected function _after_find(&$result,$options) {} public function setField($field,$value,$condition='') { if(empty($condition) && isset($this->options['where'])) $condition = $this->options['where']; $options['where'] = $condition; if(is_array($field)) { foreach ($field as $key=>$val) $data[$val] = $value[$key]; }else{ $data[$field] = $value; } return $this->save($data,$options); } public function setInc($field,$condition='',$step=1) { return $this->setField($field,array('exp',$field.'+'.$step),$condition); } public function setDec($field,$condition='',$step=1) { return $this->setField($field,array('exp',$field.'-'.$step),$condition); } public function getField($field,$condition='',$sepa=' ') { if(empty($condition) && isset($this->options['where'])) $condition = $this->options['where']; $options['where'] = $condition; $options['field'] = $field; $options = $this->_parseOptions($options); if(strpos($field,',')) { $resultSet = $this->db->select($options); if(!empty($resultSet)) { $field = explode(',',$field); $key = array_shift($field); $cols = array(); foreach ($resultSet as $result){ $name = $result[$key]; $cols[$name] = ''; foreach ($field as $val) $cols[$name] .= $result[$val].$sepa; $cols[$name] = substr($cols[$name],0,-strlen($sepa)); } return $cols; } }else{ $options['limit'] = 1; $result = $this->db->select($options); if(!empty($result)) { return reset($result[0]); } } return null; } public function create($data='',$type='') { if(empty($data)) { $data = $_POST; }elseif(is_object($data)){ $data = get_object_vars($data); }elseif(!is_array($data)){ $this->error = L('_DATA_TYPE_INVALID_'); return false; } $type = $type?$type:(!empty($data[$this->getPk()])?self::MODEL_UPDATE:self::MODEL_INSERT); if(C('TOKEN_ON') && !$this->autoCheckToken($data)) { $this->error = L('_TOKEN_ERROR_'); return false; } if(!empty($this->_map)) { foreach ($this->_map as $key=>$val){ if(isset($data[$key])) { $data[$val] = $data[$key]; unset($data[$key]); } } } if(!$this->autoValidation($data,$type)) return false; $vo = array(); foreach ($this->fields as $key=>$name){ if(substr($key,0,1)=='_') continue; $val = isset($data[$name])?$data[$name]:null; if(!is_null($val)){ $vo[$name] = (MAGIC_QUOTES_GPC && is_string($val))? stripslashes($val) : $val; } } $this->autoOperation($vo,$type); $this->data = $vo; return $vo; } public function autoCheckToken($data) { $name = C('TOKEN_NAME'); if(isset($_SESSION[$name])) { if(empty($data[$name]) || $_SESSION[$name] != $data[$name]) { return false; } unset($_SESSION[$name]); } return true; } public function regex($value,$rule) { $validate = array( 'require'=> '/.+/', 'email' => '/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/', 'url' => '/^http:\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"\"])*$/', 'currency' => '/^\d+(\.\d+)?$/', 'number' => '/^\d+$/', 'zip' => '/^[1-9]\d{5}$/', 'integer' => '/^[-\+]?\d+$/', 'double' => '/^[-\+]?\d+(\.\d+)?$/', 'english' => '/^[A-Za-z]+$/', ); if(isset($validate[strtolower($rule)])) $rule = $validate[strtolower($rule)]; return preg_match($rule,$value)===1; } private function autoOperation(&$data,$type) { if(!empty($this->_auto)) { foreach ($this->_auto as $auto){ if(empty($auto[2])) $auto[2] = self::MODEL_INSERT; if( $type == $auto[2] || $auto[2] == self::MODEL_BOTH) { switch($auto[3]) { case 'function': case 'callback': $args = isset($auto[4])?$auto[4]:array(); if(isset($data[$auto[0]])) { array_unshift($args,$data[$auto[0]]); } if('function'==$auto[3]) { $data[$auto[0]] = call_user_func_array($auto[1], $args); }else{ $data[$auto[0]] = call_user_func_array(array(&$this,$auto[1]), $args); } break; case 'field': $data[$auto[0]] = $data[$auto[1]]; break; case 'string': default: $data[$auto[0]] = $auto[1]; } if(false === $data[$auto[0]] ) unset($data[$auto[0]]); } } } return $data; } private function autoValidation($data,$type) { if(!empty($this->_validate)) { foreach($this->_validate as $key=>$val) { if(empty($val[5]) || $val[5]== self::MODEL_BOTH || $val[5]== $type ) { if(0==strpos($val[2],'{%') && strpos($val[2],'}')) $val[2] = L(substr($val[2],2,-1)); $val[3] = isset($val[3])?$val[3]:self::EXISTS_VAILIDATE; $val[4] = isset($val[4])?$val[4]:'regex'; switch($val[3]) { case self::MUST_VALIDATE: if(false === $this->_validationField($data,$val)){ $this->error = $val[2]; return false; } break; case self::VALUE_VAILIDATE: if('' != trim($data[$val[0]])){ if(false === $this->_validationField($data,$val)){ $this->error = $val[2]; return false; } } break; default: if(isset($data[$val[0]])){ if(false === $this->_validationField($data,$val)){ $this->error = $val[2]; return false; } } } } } } return true; } private function _validationField($data,$val) { switch($val[4]) { case 'function': case 'callback': $args = isset($val[6])?$val[6]:array(); array_unshift($args,$data[$val[0]]); if('function'==$val[4]) { return call_user_func_array($val[1], $args); }else{ return call_user_func_array(array(&$this, $val[1]), $args); } case 'confirm': return $data[$val[0]] == $data[$val[1]]; case 'in': return in_array($data[$val[0]] ,$val[1]); case 'equal': return $data[$val[0]] == $val[1]; case 'unique': if(is_string($val[0]) && strpos($val[0],',')) $val[0] = explode(',',$val[0]); $map = array(); if(is_array($val[0])) { foreach ($val[0] as $field) $map[$field] = $data[$field]; }else{ $map[$val[0]] = $data[$val[0]]; } if(!empty($data[$this->getPk()])) { $map[$this->getPk()] = array('neq',$data[$this->getPk()]); } if($this->where($map)->find()) return false; break; case 'regex': default: return $this->regex($data[$val[0]],$val[1]); } return true; } public function query($sql) { if(!empty($sql)) { if(strpos($sql,'__TABLE__')) $sql = str_replace('__TABLE__',$this->getTableName(),$sql); return $this->db->query($sql); }else{ return false; } } public function execute($sql) { if(!empty($sql)) { if(strpos($sql,'__TABLE__')) $sql = str_replace('__TABLE__',$this->getTableName(),$sql); return $this->db->execute($sql); }else { return false; } } public function db($linkNum,$config=''){ static $_db = array(); if(!isset($_db[$linkNum]) && !empty($config)) { $_db[$linkNum] = Db::getInstance($config); }elseif(NULL === $config){ $_db[$linkNum]->close(); unset($_db[$linkNum]); return ; } $this->db = $_db[$linkNum]; return $this; } public function getModelName() { if(empty($this->name)) $this->name = substr(get_class($this),0,-5); return $this->name; } public function getTableName() { if(empty($this->trueTableName)) { $tableName = !empty($this->tablePrefix) ? $this->tablePrefix : ''; if(!empty($this->tableName)) { $tableName .= $this->tableName; }else{ $tableName .= parse_name($this->name); } $tableName .= !empty($this->tableSuffix) ? $this->tableSuffix : ''; if(!empty($this->dbName)) $tableName = $this->dbName.'.'.$tableName; $this->trueTableName = strtolower($tableName); } return $this->trueTableName; } public function startTrans() { $this->commit(); $this->db->startTrans(); return ; } public function commit() { return $this->db->commit(); } public function rollback() { return $this->db->rollback(); } public function getError(){ return $this->error; } public function getDbError() { return $this->db->getError(); } public function getLastInsID() { return $this->db->lastInsID; } public function getLastSql() { return $this->db->getLastSql(); } public function getPk() { return isset($this->fields['_pk'])?$this->fields['_pk']:$this->pk; } public function getDbFields(){ return $this->fields; } public function data($data){ if(is_object($data)){ $data = get_object_vars($data); }elseif(is_string($data)){ parse_str($data,$data); }elseif(!is_array($data)){ throw_exception(L('_DATA_TYPE_INVALID_')); } $this->data = $data; return $this; } public function join($join) { if(is_array($join)) $this->options['join'] = $join; else $this->options['join'][] = $join; return $this; } public function setProperty($name,$value) { if(property_exists($this,$name)) $this->$name = $value; return $this; } }; class ViewModel extends Model { protected $viewFields = array(); protected function _checkTableInfo() {} public function getTableName() { if(empty($this->trueTableName)) { $tableName = ''; foreach ($this->viewFields as $key=>$view){ $class = $key.'Model'; $Model = class_exists($class)?new $class():M($key); $tableName .= $Model->getTableName(); $tableName .= !empty($view['_as'])?' '.$view['_as']:' '.$key; $tableName .= !empty($view['_on'])?' ON '.$view['_on']:''; $type = !empty($view['_type'])?$view['_type']:''; $tableName .= ' '.strtoupper($type).' JOIN '; $len = strlen($type.'_JOIN '); } $tableName = substr($tableName,0,-$len); $this->trueTableName = $tableName; } return $this->trueTableName; } protected function _options_filter(&$options) { if(isset($options['field'])) $options['field'] = $this->checkFields($options['field']); else $options['field'] = $this->checkFields(); if(isset($options['group'])) $options['group'] = $this->checkGroup($options['group']); if(isset($options['order'])) $options['order'] = $this->checkOrder($options['order']); } private function _checkFields($name,$fields) { if(false !== $pos = array_search('*',$fields)) { $fields = array_merge($fields,M($name)->getDbFields()); unset($fields[$pos]); } return $fields; } protected function checkCondition($where) { if(is_array($where)) { $view = array(); foreach ($this->viewFields as $key=>$val){ $k = isset($val['_as'])?$val['_as']:$key; $val = $this->_checkFields($key,$val); foreach ($where as $name=>$value){ if(false !== $field = array_search($name,$val,true)) { $_key = is_numeric($field)? $k.'.'.$name : $k.'.'.$field; $view[$_key] = $value; unset($where[$name]); } } } $where = array_merge($where,$view); } return $where; } protected function checkOrder($order='') { if(!empty($order)) { $orders = explode(',',$order); $_order = array(); foreach ($orders as $order){ $array = explode(' ',$order); $field = $array[0]; $sort = isset($array[1])?$array[1]:'ASC'; foreach ($this->viewFields as $name=>$val){ $k = isset($val['_as'])?$val['_as']:$name; $val = $this->_checkFields($name,$val); if(false !== $_field = array_search($field,$val,true)) { $field = is_numeric($_field)?$k.'.'.$field:$k.'.'.$_field; break; } } $_order[] = $field.' '.$sort; } $order = implode(',',$_order); } return $order; } protected function checkGroup($group='') { if(!empty($group)) { $groups = explode(',',$group); $_group = array(); foreach ($groups as $field){ foreach ($this->viewFields as $name=>$val){ $k = isset($val['_as'])?$val['_as']:$name; $val = $this->_checkFields($name,$val); if(false !== $_field = array_search($field,$val,true)) { $field = is_numeric($_field)?$k.'.'.$field:$k.'.'.$_field; break; } } $_group[] = $field; } $group = implode(',',$_group); } return $group; } protected function checkFields($fields='') { if(empty($fields) || '*'==$fields ) { $fields = array(); foreach ($this->viewFields as $name=>$val){ $k = isset($val['_as'])?$val['_as']:$name; $val = $this->_checkFields($name,$val); foreach ($val as $key=>$field){ if(is_numeric($key)) { $fields[] = $k.'.'.$field.' AS '.$field; }elseif('_' != substr($key,0,1)) { if( false !== strpos($key,'*') || false !== strpos($key,'(') || false !== strpos($key,'.')) { $fields[] = $key.' AS '.$field; }else{ $fields[] = $k.'.'.$key.' AS '.$field; } } } } $fields = implode(',',$fields); }else{ if(!is_array($fields)) $fields = explode(',',$fields); $array = array(); foreach ($fields as $key=>$field){ if(strpos($field,'(') || strpos(strtolower($field),' as ')){ $array[] = $field; unset($fields[$key]); } } foreach ($this->viewFields as $name=>$val){ $k = isset($val['_as'])?$val['_as']:$name; $val = $this->_checkFields($name,$val); foreach ($fields as $key=>$field){ if(false !== $_field = array_search($field,$val,true)) { if(is_numeric($_field)) { $array[] = $k.'.'.$field.' AS '.$field; }elseif('_' != substr($_field,0,1)){ if( false !== strpos($_field,'*') || false !== strpos($_field,'(') || false !== strpos($_field,'.')) $array[] = $_field.' AS '.$field; else $array[] = $k.'.'.$_field.' AS '.$field; } } } } $fields = implode(',',$array); } return $fields; } } alias_import(array( 'Model' => THINK_PATH.'/Mode/Amf/Model.class.php', 'Db' => THINK_PATH.'/Mode/Phprpc/Db.class.php', 'Debug' => THINK_PATH.'/Lib/Think/Util/Debug.class.php', 'Session' => THINK_PATH.'/Lib/Think/Util/Session.class.php', ) ); 